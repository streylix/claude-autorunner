#!/bin/bash

# addmsg - Add message to terminal queue via API
# Usage: addmsg "message" [terminal_number]
# Example: addmsg "ls -la" 1

# Configuration
API_BASE_URL="http://127.0.0.1:8001/api"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to show usage
show_usage() {
    echo "Usage: $0 \"message\" [terminal_number]"
    echo ""
    echo "Arguments:"
    echo "  message          The command/message to add to the queue (required)"
    echo "  terminal_number  Terminal number (1, 2, 3, etc.) - defaults to 1"
    echo ""
    echo "Examples:"
    echo "  $0 \"ls -la\" 1"
    echo "  $0 \"git status\" 2"
    echo "  $0 \"echo hello\""
    echo ""
    exit 1
}

# Function to get ALL terminal session IDs by number
get_terminal_sessions() {
    local terminal_num=$1
    local terminal_name="Terminal $terminal_num"
    
    # Get all terminal sessions and find ALL sessions with the matching name
    local session_data=$(curl -s "$API_BASE_URL/terminal/sessions/" 2>/dev/null)
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error: Could not connect to API at $API_BASE_URL${NC}" >&2
        return 1
    fi
    
    # Parse JSON to find ALL terminal session IDs with matching name
    local session_ids=$(echo "$session_data" | python3 -c "
import json, sys
data = json.load(sys.stdin)
session_ids = []
for session in data:
    if session['name'] == '$terminal_name':
        session_ids.append(session['id'])
print(' '.join(session_ids))
" 2>/dev/null)
    
    if [ -z "$session_ids" ]; then
        echo -e "${RED}Error: Terminal $terminal_num not found${NC}" >&2
        return 1
    fi
    
    echo "$session_ids"
    return 0
}

# Function to add message to queue
add_message() {
    local message="$1"
    local session_id="$2"
    
    # Create JSON payload
    local json_payload=$(python3 -c "
import json
print(json.dumps({
    'terminal_session': '$session_id',
    'content': '''$message'''
}))
")
    
    # Send API request
    local response=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d "$json_payload" \
        "$API_BASE_URL/queue/queue/" 2>/dev/null)
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error: Failed to send API request${NC}" >&2
        return 1
    fi
    
    # Check if response contains an error
    local error_check=$(echo "$response" | python3 -c "
import json, sys
try:
    data = json.load(sys.stdin)
    if 'error' in data or 'detail' in data:
        print('ERROR')
    else:
        print('SUCCESS')
except:
    print('ERROR')
" 2>/dev/null)
    
    if [ "$error_check" = "ERROR" ]; then
        echo -e "${RED}Error: API request failed${NC}" >&2
        echo "Response: $response" >&2
        return 1
    fi
    
    return 0
}

# Main script
main() {
    # Check arguments
    if [ $# -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        show_usage
    fi
    
    local message="$1"
    local terminal_num="${2:-1}"  # Default to terminal 1
    
    # Validate terminal number
    if ! [[ "$terminal_num" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}Error: Terminal number must be a positive integer${NC}" >&2
        exit 1
    fi
    
    # Check if message is provided
    if [ -z "$message" ]; then
        echo -e "${RED}Error: Message cannot be empty${NC}" >&2
        show_usage
    fi
    
    echo -e "${YELLOW}Adding message to Terminal $terminal_num...${NC}"
    
    # Get ALL terminal session IDs for this terminal
    session_ids=$(get_terminal_sessions "$terminal_num")
    if [ $? -ne 0 ]; then
        exit 1
    fi
    
    # Add message to ALL matching sessions
    local success_count=0
    local total_count=0
    
    for session_id in $session_ids; do
        ((total_count++))
        if add_message "$message" "$session_id"; then
            ((success_count++))
        fi
    done
    
    if [ $success_count -eq $total_count ]; then
        echo -e "${GREEN}✓ Successfully added message to Terminal $terminal_num queue ($success_count/$total_count sessions):${NC}"
        echo "  \"$message\""
    elif [ $success_count -gt 0 ]; then
        echo -e "${YELLOW}⚠ Partially added message to Terminal $terminal_num queue ($success_count/$total_count sessions):${NC}"
        echo "  \"$message\""
    else
        echo -e "${RED}✗ Failed to add message to any Terminal $terminal_num sessions${NC}" >&2
        exit 1
    fi
}

# Run main function with all arguments
main "$@"